# *** INTRODUCTION ***
The purpose here is just to exercise the concept of marrying narrative (story) to source code.

The underlying concept is that narrative is a foundational aspect of human cognition - it is through story that we get to experience the abstract; for understanding arises not just from knowing, but from experiencing (feeling) that which is known.

We believe coding is a creative process, but to be so the code must ignite cognition.

This is the fundamental tenet of the Narratival-Exposition Paradigm, which we explore with this code base.

So, this code base reads this code base to produce this code base's documentation...

## Pre-requisites
These scripts require a code base that has been written in the (evolving) Narratival-Exposition's grammar - e.g. this code base!

## World View
Generating the narrative happens in 3 phases (well, 3 phases after actually writing the code):
- Extracting points of story; textual commentary attached to Pythonic objects. 
- Editorialisation of their order (i.e. so that the narrative is orthogonal to the code architecture)
- Narration: pouring the story points into the editorialsation to generate the narrative arc

Herein, we see the narration of the phase 1 code base: the extraction process. This produces the files needed for the (manual) editorialisation phase, which then allows the narration script to produce the doccumentation.

During extraction the core concepts we will meet are:
- CODICES: books or lore that offer symbolic overlays to the source code
- GRANULATION: the powderisation, purification, mixing and refinement of the codified symbolism
- REGISTRAR: of births, deaths and marriages; providing the lineage (Pythonic scope) of granular entities
- LEXICOGRAPHICS: the mechanisms that sift and convert the lineage-tracked symbolic grains to generate lexemes: the discovered lexical tokens in the source code along with their canonical reference and semantic meaning.

# *** CHAPTER - CODICES ***
First we talk about codices... how they provide a symbolic view of Python source code through a variety of lenses
## THROUGHLINE
codices:THROUGHLINE
## PROVISIONS
**The basic CODEX provides:**
codices.token:CONTINUUM
codices.tokenize:CONTINUUM
codices.CODEX_OBJECTS:KNOWLEDGE
codices.CODEX:AFFORDANCE
codices.CODEX.LEXICON:KNOWLEDGE
codices.CODEX.objectify:MECHANISM
codices.CODEX.token_val:MECHANISM
codices.CODEX.token_start:MECHANISM
## ENTITIES and VIEWS
**And then to support the different views:**
codices.ENTITY:AFFORDANCE
codices.ENTITY.add:MECHANISM
codices.ENTITY.is_entity:SKILL
---
**Which gifts us these varying views:**
granulator.SAMPLE:AFFORDANCE
granulator.REFINE:AFFORDANCE
registrar.LINEAGE:AFFORDANCE
---
---
# *** CHAPTER - GRANULATION ***
## THROUGHLINE
granulator:THROUGHLINE
## DESCRIPTION, contexts and knowledge:
granulator.GRANULATOR:FIGURATION
granulator.os:CONTINUUM
granulator.dataclasses:CONTINUUM
granulator.GRANULATOR.__init__.bx_id:KNOWLEDGE
granulator.GRANULATOR.__init__.self.powder:KNOWLEDGE
granulator.GRANULATOR.__init__.self.purified:KNOWLEDGE
granulator.GRANULATOR.__init__.self.intermediate:KNOWLEDGE
granulator.GRANULATOR.__init__.self.refined:KNOWLEDGE
## Key BEHAVIOURS and supporting mechanisms
granulator.GRANULATOR.granulate:BEHAVIOUR
granulator.GRANULATOR.dump_powder:MECHANISM
granulator.GRANULATOR.dump_purified:MECHANISM
granulator.GRANULATOR.dump_bx_record:MECHANISM
granulator.GRANULATOR.dump_inventory:MECHANISM
---
---
## *** GRANULATION: PURIFY AND MIX ***
Transforms the powderised particles into:
granulator.Precursor:KNOWLEDGE
### SAMPLE CODEX
**This stage of Granulation uses the SAMPLE derived codex, which provides:**
granulator.SAMPLE.assay:MECHANISM
granulator.SAMPLE.particle_name:MECHANISM
granulator.SAMPLE.particle_location:MECHANISM
**Along with these pairings of knowledge and skills:**
granulator.SAMPLE.SIEVE:KNOWLEDGE
granulator.SAMPLE.sieved:SKILL
granulator.SAMPLE.SLUDGE:KNOWLEDGE
granulator.SAMPLE.has_sludged:DISPOSITION
granulator.SAMPLE.DESLUDGE:KNOWLEDGE
granulator.SAMPLE.has_desludged:DISPOSITION
granulator.SAMPLE.FILTERED:KNOWLEDGE
granulator.SAMPLE.FILTER:KNOWLEDGE
granulator.SAMPLE.is_filtrate:SKILL
granulator.SAMPLE.SUSPENSIONS:KNOWLEDGE
granulator.SAMPLE._is_suspension:MECHANISM
### Key behaviours
granulator.GRANULATOR.purify:BEHAVIOUR
granulator.GRANULATOR.fine_mix:BEHAVIOUR
granulator.GRANULATOR._mix
granulator.GRANULATOR._evapourate
---
---
## *** GRANULATION: REFINE ***
**Transforms the precursor into:**
granulator.Grain:KNOWLEDGE
**Additional material details:**
granulator.GrainType:KNOWLEDGE
granulator.Grain.semantics:MECHANISM
### REFINE CODEX
**This stage of Granulation uses the REFINE derived codex, which provides these pairings of knowledge and skills**
granulator.REFINE.DISTILLANT:KNOWLEDGE
granulator.REFINE.is_distillant:DISPOSITION
granulator.REFINE.IDENTITY_GRAINS:KNOWLEDGE
granulator.REFINE.TEXT_GRAINS:KNOWLEDGE
granulator.REFINE.get_grain_type:SKILL
### Key behaviours
granulator.GRANULATOR.refine:BEHAVIOUR
---
---
# *** CHAPTER - THE REGISTRAR ***
## THROUGHLINE
registrar:THROUGHLINE
## DESCRIPTION, contexts and knowledge
registrar.REGISTRAR:FIGURATION
registrar.REGISTRAR.__init__.self._resilience:KNOWLEDGE
registrar.REGISTRAR.__init__.self._register:KNOWLEDGE
registrar.REGISTRAR.__init__.self._heir_apparent:DISPOSITION
registrar.REGISTRAR.__init__.self._heir:KNOWLEDGE
## LINEAGE CODEX
**This stage of Granulation uses the LINEAGE derived codex, which provides these pairings of knowledge and skills**
registrar.LINEAGE.PROGENITORS:KNOWLEDGE
registrar.LINEAGE.is_progenitor:SKILL
registrar.LINEAGE.HONOURIFICS:KNOWLEDGE
registrar.LINEAGE.IDENTITIES:KNOWLEDGE
registrar.LINEAGE.DESCENDERS:KNOWLEDGE
registrar.LINEAGE.is_descender:SKILL
registrar.LINEAGE.TRUE_SUBJECTS:KNOWLEDGE
registrar.LINEAGE.is_true_identity:SKILL
registrar.LINEAGE.is_true_subject:SKILL
registrar.LINEAGE.subject_name:MECHANISM
registrar.LINEAGE.GROWTH:KNOWLEDGE
registrar.LINEAGE.growth:SKILL
registrar.LINEAGE.DECLINE:KNOWLEDGE
registrar.LINEAGE.decline:SKILL
---
## Key behaviours
registrar.REGISTRAR.record_history:BEHAVIOUR
##  supporting mechanisms
registrar.REGISTRAR._entitle:SKILL
registrar.REGISTRAR._lineage_fluxed
registrar.REGISTRAR._seek_heir_apparent:DISPOSITION
registrar.REGISTRAR._prepare_for_heir:DISPOSITION
registrar.REGISTRAR._record_heir:SKILL
registrar.REGISTRAR._sign_off_record:SKILL
registrar.REGISTRAR._register_empty:FLAW
---
---
# *** CHAPTER LEXICOGRAPHICS ***
## THROUGHLINE
lexicographics:THROUGHLINE
## DESCRIPTION
lexicographics.LEXICOGRAPHER:FIGURATION
## CONTEXTS and KNOWLEDGE
lexicographics.dataclasses:CONTINUUM
lexicographics.LexicalOccurence:KNOWLEDGE
lexicographics.Lexeme:KNOWLEDGE
lexicographics.ExpoTags:KNOWLEDGE
## KEY BEHAVIOURS
lexicographics.LEXICOGRAPHER.extract:BEHAVIOUR
lexicographics.LEXICOGRAPHER.package_prose:BEHAVIOUR
lexicographics.LEXICOGRAPHER._update_survivors:MECHANISM
lexicographics.LEXICOGRAPHER._update_semantic_package:MECHANISM

## Supporting behaviours
lexicographics.LEXICOGRAPHER._unpack_text_entry:BEHAVIOUR
lexicographics.LEXICOGRAPHER._nonjudgemental_clean:BEHAVIOUR
## Supporting skills and mechanisms
lexicographics.Lexeme.from_parts:MECHANISM
lexicographics.Lexeme.summary:SKILL
lexicographics.Lexeme._dedent:MECHANISM
lexicographics.LEXICOGRAPHER._is_expo:SKILL
---
---
**And once all done, how we get the detail preserved in files*:*
lexicographics.LEXICOGRAPHER.save_to_file:BEHAVIOUR
lexicographics.LEXICOGRAPHER.list_expositions:BEHAVIOUR
lexicographics.LEXICOGRAPHER.print_expositions:BEHAVIOUR
lexicographics.LEXICOGRAPHER.print_expo:BEHAVIOUR
lexicographics.LEXICOGRAPHER._indent:MECHANISM
---
---
doc ends.